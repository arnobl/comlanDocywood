grammar org.thingml.xtext.ThingML hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "src/main/resources/thingML/ThingML.ecore"


ThingMLModel returns ThingMLModel:
		imports+=Import*
		types+=ObjectType*
		types+=PrimitiveType*
		types+=Enumeration*
		types+=Thing*
		protocols+=Protocol*
		configs+=Configuration*;
		
Import:
	"import" importURI=STRING_LIT
;

PlatformAnnotation returns PlatformAnnotation:
	'@' name=ID value=STRING_LIT ; 

AnnotatedElement:
	Protocol | Function | Property | Message | Parameter | Port | Configuration | Handler | State | CompositeState | 
	FinalState | Type | PropertyAssign | Stream | Session | ParallelRegion | LocalVariable | Instance | AbstractConnector
;


/*****************************************************************************
 *       TYPES / ENUMERATIONS                                                *
 *****************************************************************************/

TypeRef returns TypeRef:
	type=[ID] (^isArray?='[' (cardinality=Expression)? ']')?
;

Type:
	Thing | PrimitiveType | ObjectType | Enumeration ;

PrimitiveType returns PrimitiveType:
	'datatype' name=ID '<' ByteSize=INT '>'	( annotations+=PlatformAnnotation )* (';')?;
	
ObjectType returns ObjectType:
	'object' name=ID ( annotations+=PlatformAnnotation )* (';')?;

Enumeration returns Enumeration:
	'enumeration' name=ID ( annotations+=PlatformAnnotation )* '{' (literals+=EnumerationLiteral)* '}';

EnumerationLiteral returns EnumerationLiteral:
	name=ID ( annotations+=PlatformAnnotation )* ;

/*****************************************************************************
 *       THING / COMPONENT MODEL                                             *
 *****************************************************************************/

Thing returns Thing:
	'thing' (^fragment?='fragment')? name=ID ('includes' includes+=[ID] ( "," includes+=[ID])*)?
	annotations+=PlatformAnnotation* '{'
		messages+=Message*
		ports+=Port*
		properties+=Property*
		functions+=Function*
		assign+=PropertyAssign*
		behaviour+=CompositeState*
	'}';

PropertyAssign returns PropertyAssign:
	'set' property=[ID] ('[' index+=Expression ']')* '=' init=Expression ( annotations+=PlatformAnnotation )*;

Protocol returns Protocol:
	'protocol' name=ID ( annotations+=PlatformAnnotation )* ';';

Function returns Function:
	'function' name=ID '(' (parameters+=Parameter ( "," parameters+=Parameter)* )? ')' (':' typeRef=TypeRef)?
	annotations+=PlatformAnnotation* body=Action
		//('isArray' isArray=EBoolean)?
		//('cardinality' cardinality=Expression)?
;

Property returns Property:
	(^changeable?='readonly')? 'property' name=ID ':' typeRef=TypeRef ( '=' init=Expression)?
	( annotations+=PlatformAnnotation )*
		//('isArray' isArray=EBoolean)?
		//('changeable' changeable=EBoolean)?
		//('cardinality' cardinality=Expression)?
;

Message returns Message:
	'message' name=ID '(' ( parameters+=Parameter ( "," parameters+=Parameter)* )? ')'
	( annotations+=PlatformAnnotation )* (';')?;
	
Parameter returns Parameter:
	name=ID ':' typeRef=TypeRef ( annotations+=PlatformAnnotation )*
//		('isArray' isArray=EBoolean)?
//		('cardinality' cardinality=Expression)?
;

Port returns Port:
	RequiredPort | ProvidedPort | InternalPort;
	
	
RequiredPort returns RequiredPort:
	(optional?='optional')? 'required' 'port' name=ID ( annotations+=PlatformAnnotation )* '{'
		(('sends' sends+=[ID] ( "," sends+=[ID])* ) |
		('receives' receives+=[ID] ( "," receives+=[ID])* ))*
	'}';

ProvidedPort returns ProvidedPort:
	'provided' 'port' name=ID ( annotations+=PlatformAnnotation )* '{'
		(('sends' sends+=[ID] ( "," sends+=[ID])* ) |
		('receives' receives+=[ID] ( "," receives+=[ID])* ))*
	'}';

InternalPort returns InternalPort:
	'internal' 'port' name=ID ( annotations+=PlatformAnnotation )* '{'
		(('sends' sends+=[ID] ( "," sends+=[ID])* ) |
		('receives' receives+=[ID] ( "," receives+=[ID])* ))*
	'}';

/*****************************************************************************
 *       CEP STREAMS                                                         *
 *****************************************************************************/
	
Source returns Source:
	JoinSources | MergeSources | SimpleSource;

ViewSource returns ViewSource:
	Filter | LengthWindow | TimeWindow;	

ReferencedElmt returns ReferencedElmt:
	Message | Parameter | Property | ReceiveMessage | LocalVariable | JoinSources | MergeSources | SimpleSource | MessageParameter;

ElmtProperty returns ElmtProperty:
	SimpleParamRef | ArrayParamRef | LengthArray;


JoinSources returns JoinSources:
	'join' name=ID ':' '[' sources+=Source ( "&" sources+=Source)* '->' resultMessage=[ID] '(' rules+=Expression ( "," rules+=Expression)* ')' ']' ('::' operators+=ViewSource)*;

MergeSources returns MergeSources:
	'merge' name=ID ':' '[' sources+=Source ( "|" sources+=Source)* '->' resultMessage=[ID] ']' ('::' operators+=ViewSource)*;

SimpleSource returns SimpleSource:
	name=ID ':' message=ReceiveMessage  ('::' operators+=ViewSource)*;

Filter returns Filter:
	'keep' 'if' guard=Expression;

LengthWindow returns LengthWindow:
	'buffer' size=Expression ('by' step=Expression)?;

TimeWindow returns TimeWindow:
	'during' duration=Expression ('by' step=Expression)?;

MessageParameter returns MessageParameter:
	name=ID ':' msgRef=[ID] ;

SimpleParamRef returns SimpleParamRef:
	parameterRef=[ID];

ArrayParamRef returns ArrayParamRef:
	parameterRef=[ID] '[' ']';

LengthArray returns LengthArray:
	'length';

/*****************************************************************************
 *       STATE MECHINES                                                      *
 *****************************************************************************/

Region:
	CompositeState | ParallelRegion | Session;

FinalState returns FinalState:
	'final' 'state' name=ID ( annotations+=PlatformAnnotation )* '{' ('on' 'entry' entry=Action)? '}'
;

CompositeState returns CompositeState:
	'composite' 'state' name=ID 'init' initial=[ID] ('keeps' history?='history')?	( annotations+=PlatformAnnotation )* '{'
		(properties+=Property)*
		('on' 'entry' entry=Action)?
		('on' 'exit' exit=Action)?
		(substate+=State)*
		(internal+=InternalTransition)*
		(outgoing+=Transition)*
		(region+=ParallelRegion)*
	'}';

Session returns Session:
	'session' name=ID ('<' maxInstances=INT '>')? 'init' initial=[ID] annotations+=PlatformAnnotation* '{'
		properties+=Property*
		('on' 'entry' entry=Action)?
		('on' 'exit' exit=Action)?
		substate+=State*
		internal+=InternalTransition*
		region+=ParallelRegion*
	'}';

ParallelRegion returns ParallelRegion:
	'region' (name=ID)? 'init' initial=[ID] ('keeps' history?='history')?	annotations+=PlatformAnnotation* '{'
		(substate+=State)*
	'}';
	
State returns State:
	CompositeState | FinalState | CompositeState | Session |
	'state' name=ID annotations+=PlatformAnnotation* '{'
		properties+=Property*
		('on' 'entry' entry=Action)?
		('on' 'exit' exit=Action)?
		internal+=InternalTransition*
		outgoing+=Transition*
	'}';

Handler:
	Transition | InternalTransition
;

Transition returns Transition:
	'transition' (name=ID)? '->' target=[ID]
	( annotations+=PlatformAnnotation )*
	('event' event+=Event)*
	('guard' guard=Expression)?
	('action' action=Action)?;

InternalTransition returns InternalTransition:
	'internal' (name=ID)?
	( annotations+=PlatformAnnotation )*
	('event' event+=Event)*
	('guard' guard=Expression)?
	('action' action=Action)?;

Event returns Event:
	ReceiveMessage;

ReceiveMessage returns ReceiveMessage:
	(name=ID ":")? port=[ID]'?'message=[ID];

/*****************************************************************************
 *       ACTIONS                                                             *
 *****************************************************************************/
 
Action returns Action:
	ActionBlock | ExternStatement | SendAction | VariableAssignment | Increment | Decrement | LoopAction |
	ConditionalAction | ReturnAction | PrintAction | ErrorAction | StartSession | FunctionCallStatement | LocalVariable;

Variable:
	LocalVariable | Property | Parameter ;

ActionBlock returns ActionBlock:
	'do' (actions+=Action)* 'end';

ExternStatement returns ExternStatement:
	statement = STRING_EXT ('&' segments+=Expression)*;
	
LocalVariable returns LocalVariable:
	(^changeable?='readonly')? 'var' name=ID ':'  typeRef=TypeRef ( '=' init=Expression)? ( annotations+=PlatformAnnotation )*
		//('isArray' isArray=EBoolean)?
		//('cardinality' cardinality=Expression)?
;

SendAction returns SendAction:
	port=[ID] '!' message=[ID] '(' (parameters+=Expression ( "," parameters+=Expression)*)? ')';

VariableAssignment returns VariableAssignment:
	property=[ID] ('[' index+=Expression ']')* '=' expression=Expression;


Increment returns Increment:
	var=[ID] '++';

Decrement returns Decrement:
	var=[ID] '--';

LoopAction returns LoopAction:
	'while' '(' condition=Expression ')' action=Action;

ConditionalAction returns ConditionalAction:
	'if' '(' condition=Expression ')' action=Action ('else' elseAction=Action)?;

ReturnAction returns ReturnAction:
	'return' exp=Expression;

PrintAction returns PrintAction:
	'print' msg=Expression;

ErrorAction returns ErrorAction:
	'error' msg=Expression;

StartSession returns StartSession:
	'fork' session=[ID] ;


FunctionCallStatement returns FunctionCallStatement:
	function=[ID] '(' (parameters+=Expression ( "," parameters+=Expression)*)? ')';


/*****************************************************************************
 *       EXPRESSIONS                                                         *
 *****************************************************************************/

	//ExternExpression | EnumLiteralRef | IntegerLiteral | BooleanLiteral | StringLiteral | DoubleLiteral | NotExpression | UnaryMinus | 
	//PlusExpression | MinusExpression | TimesExpression | DivExpression | ModExpression | EqualsExpression | NotEqualsExpression | GreaterExpression | 
	//LowerExpression | GreaterOrEqualExpression | LowerOrEqualExpression | AndExpression | OrExpression | PropertyReference | ArrayIndex | 
	//ExpressionGroup | FunctionCallExpression | MessageParameter | Reference;


Expression: OrExpression;

OrExpression returns Expression:
	AndExpression ({OrExpression.lhs=current} "or" rhs=AndExpression)*
;

AndExpression returns Expression:
	Equality ({AndExpression.lhs=current} "and" rhs=Equality)*
;

Equality returns Expression:
	Comparaison (
	( {EqualsExpression.lhs=current} "==" rhs=Comparaison )*
	( {NotEqualsExpression.lhs=current} "!=" rhs=Comparaison )*
	)
;

Comparaison returns Expression:
	Addition (
	( {GreaterExpression.lhs=current} ">" rhs=Addition ) |
	( {LowerExpression.lhs=current} "<" rhs=Addition ) |
	( {GreaterOrEqualExpression.lhs=current} ">=" rhs=Addition ) |
	( {LowerOrEqualExpression.lhs=current} "<=" rhs=Addition )
	)*
;

Addition returns Expression:
	Multiplication (
	( {PlusExpression.lhs=current} "+" rhs=Multiplication ) |
	( {MinusExpression.lhs=current} "-" rhs=Multiplication )
	)*	
;

Multiplication returns Expression:
	Modulo (
	( {TimesExpression.lhs=current} "*" rhs=Modulo ) |
	( {DivExpression.lhs=current} "/" rhs=Modulo )
	)*	
;

Modulo returns Expression:
	Primary ({ModExpression.lhs=current} "%" rhs=Expression)?
;


Primary returns Expression:
	'(' Expression ')' |
	{NotExpression} "not" term=Primary |
	{UnaryMinus} '-' term=Primary |
	ArrayIndexPostfix
;

ArrayIndexPostfix returns Expression:
	AtomicExpression ( {ArrayIndex.array=current} '[' index=Expression ']')?
;

AtomicExpression returns Expression:
	ExternExpression | EnumLiteralRef | IntegerLiteral | BooleanLiteral | StringLiteral | DoubleLiteral | PropertyReference | Reference | FunctionCallExpression 
	// | MessageParameter /* NOT CONVINCED THAT MessageParameter SHOULD BE AN EXPRESSION */
;

ExternExpression returns ExternExpression:
	expression = STRING_EXT ('&' segments+=Expression)*;
	
	
EnumLiteralRef returns EnumLiteralRef:
	^enum=[ID] ':' literal=[ID];

IntegerLiteral returns IntegerLiteral:
	intValue=INT;

BooleanLiteral returns BooleanLiteral:
	boolValue= ('true' | 'false')
	;

StringLiteral returns StringLiteral:
	stringValue=STRING_LIT;

DoubleLiteral returns DoubleLiteral:
	doubleValue = FLOAT;

PropertyReference returns PropertyReference:
	property=[ID]
;

Reference returns Reference:
	reference=[ID] "." parameter=ElmtProperty
;

FunctionCallExpression returns FunctionCallExpression:
	function=[ID]'('
		( parameters+=Expression ( "," parameters+=Expression )* )?
	')';




// Missing Expressions: ArrayIndex  ;


/*****************************************************************************
 *       CONFIGURATIONS                                                      *
 *****************************************************************************/

Configuration returns Configuration:
	'configuration' name=ID ( annotations+=PlatformAnnotation )* '{'
	(instances+=Instance)*
	(connectors+=AbstractConnector)*
	 (propassigns+=ConfigPropertyAssign)*
	'}';


Instance returns Instance:
	'instance' name=ID ':' type=[ID] ( annotations+=PlatformAnnotation )*;

ConfigPropertyAssign returns ConfigPropertyAssign:
	'set' instance=InstanceRef '.' property=[ID] ('[' index+=Expression ']')* '=' init=Expression ( annotations+=PlatformAnnotation )*;


AbstractConnector:
	Connector | ExternalConnector;
	
Connector returns Connector:
	'connector'	(name=ID)? cli=InstanceRef '.' required=[ID] '=>' srv=InstanceRef '.' provided=[ID] ( annotations+=PlatformAnnotation )*;

ExternalConnector returns ExternalConnector:
	'connector'	(name=ID)? inst=InstanceRef '.' port=[ID] 'over' protocol=[ID] ( annotations+=PlatformAnnotation )*;

InstanceRef returns InstanceRef:
	instance=[ID];


/*****************************************************************************
 *       TERMINALS                                                           *
 *****************************************************************************/

terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal INT returns ecore::EInt: ('0'..'9')+;


terminal FLOAT returns ecore::EDouble :
('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+' | '-')? ('0'..'9')+)?
| '.' ('0'..'9')+ (('e'|'E') ('+' | '-')? ('0'..'9')+)?
| ('0'..'9')+ ('e'|'E') ('+' | '-')? ('0'..'9')+;

terminal STRING_EXT:  
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'";

terminal STRING_LIT	: 
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';

terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
	